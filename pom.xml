<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>danielh1307</groupId>
	<artifactId>spring-boot-example</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<name>spring-boot-example</name>
	<description>Demo project for Spring Boot</description>

    <!-- Advantages when using the spring-boot-starter-parent: -->
    <!-- useful default settings like UTF-8, Java version, compiler flag -parameters etc. -->
    <!-- easy override specific versions like for example <tomcat.version>8.5.9</tomcat.version> -->
    <!-- if you have to import the "bill of materials", you have to set all the settings yourself and -->
    <!-- overriding specific versions is much more complicated -->
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.1.RELEASE</version> <!-- lookup parent from repository -->
	</parent>

	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<!-- Exposes several endpoints below /actuator, but some of them must be activated with properties (management.endpoints.web.exposure.include) -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-thymeleaf</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-websocket</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<!-- This dependency is needed to automatically create an XML format from our model -->
		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		<dependency>
			<!-- in compile this dependency generates a spring-configuration-metadata.json -->
			<!-- information is taken from all classes annotated with @ConfigurationProperties -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<optional>true</optional>
		</dependency>
		<dependency>
			<!-- if application is started with java -jar, the devtools are not active -->
			<!-- to apply the changes, in IntelliJ the project must be built (Build -> Build Project or COMMAND + F9) -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<optional>true</optional> <!-- only used if specific features are active; optional dependencies are not inherited transitively -->
		</dependency>

		<!-- Swagger dependency -->
		<!-- http://localhost:8080/v2/api-docs ==> get description as JSON -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.9.2</version>
		</dependency>
		<!-- http://localhost:8080/swagger-ui.html ==> get description as HTML -->
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.9.2</version>
		</dependency>

		<!-- Database dependencies -->
		<!-- spring-boot-starter-data-jpa includes spring-boot-starter-jdbc, which is only for JDBC, not JPA -->
		<!-- spring-boot-starter-data-jpa uses a default EntityManagerFactory, which does not need a persistence.xml -->
		<!-- a thread-safe EntityManager is available by default -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<!-- h2 console: http://localhost:8080/h2-console/ -->
		<!-- console is only active if devtools are active, that means it does not work if application is started with java -jar -->
		<!-- if you want to force the console, start with property spring.h2.console.enabled=true -->
		<!-- default database URL is jdbc:h2:mem:testdb -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.flywaydb</groupId>
			<artifactId>flyway-core</artifactId>
		</dependency>

		<!-- webjars -->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>webjars-locator-core</artifactId>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>sockjs-client</artifactId>
			<version>1.0.2</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>stomp-websocket</artifactId>
			<version>2.3.3</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>3.3.7</version>
		</dependency>
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.1.0</version>
		</dependency>

		<!-- test dependencies -->
		<dependency>
			<groupId>net.sourceforge.htmlunit</groupId>
			<artifactId>htmlunit</artifactId>
			<version>2.37.0</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<!-- contains e.g. SecurityMockMvcRequestPostProcessors -->
			<groupId>org.springframework.security</groupId>
			<artifactId>spring-security-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	<build>
		<finalName>${project.artifactId}</finalName>
		<plugins>
			<plugin>
				<!-- ./mvnw package ==> leads to *.jar (executable jar) and *.jar.original (all classes and resources just of this application) -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<!-- this creates a file META-INF/build-info.properties which contains useful build information and can be shown by an actuator -->
							<!-- the endpoint would be: http://localhost:8080/actuator/info -->
							<!-- you can even add your own properties -->
							<goal>build-info</goal>
						</goals>
						<configuration>
							<additionalProperties>
								<my-additional-property>here I can put anything</my-additional-property>
							</additionalProperties>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


</project>
